/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import {Group} from 'three'
import React, {Ref} from 'react'
import {useGLTF} from '@react-three/drei'
import {GLTF} from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    ['cv-1']: THREE.Mesh
    ['cv-2']: THREE.Mesh
    ['cv-3']: THREE.Mesh
  }
  materials: {
    ['cv-1']: THREE.MeshStandardMaterial
    ['cv-2']: THREE.MeshStandardMaterial
    ['cv-3']: THREE.MeshStandardMaterial
  }
}

const location = './meshes/CV.glb';

export function CV(props: JSX.IntrinsicElements['group'] & {innerRef: Ref<Group | undefined>}) {
  const { nodes, materials } = useGLTF(location) as GLTFResult;
  return (
    <group ref={props.innerRef} {...props} dispose={null}>
      <mesh
        geometry={nodes['cv-1'].geometry}
        material={materials['cv-1']}
        position={[0, 0.8, 0.29]}
        rotation={[Math.PI / 4, 0, 0]}
        scale={[0.5, 0.5, 0.5]}
      />
      <mesh
        geometry={nodes['cv-2'].geometry}
        material={materials['cv-2']}
        position={[0.43, 0.8, 0.11]}
        rotation={[0.96, Math.PI / 6, -0.62]}
        scale={[0.5, 0.5, 0.5]}
      />
      <mesh
        geometry={nodes['cv-3'].geometry}
        material={materials['cv-3']}
        position={[0.61, 0.8, -0.32]}
        rotation={[Math.PI / 2, Math.PI / 4, -Math.PI / 2]}
        scale={[0.5, 0.5, 0.5]}
      />
    </group>
  );
}

useGLTF.preload(location);
